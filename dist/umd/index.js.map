{"version":3,"file":"index.js","sources":["../../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../node_modules/string-match-all/esm/index.js","../../src/constants/constants.ts","../../src/helpers/CarakanHelper.ts","../../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../../node_modules/@babel/runtime/helpers/esm/createClass.js","../../src/helpers/SyllableBuilder.ts","../../src/functions/toJavanese.ts","../../src/helpers/LatinHelper.ts","../../src/functions/toLatin.ts"],"sourcesContent":["export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\n/*! (c) Andrea Giammarchi - ISC */\n// requires a global Symbol\nvar iterator = /* istanbul ignore next */\nfunction () {\n  var i = 0;\n  var self = this;\n  return {\n    next: function () {\n      var done = self.length <= i;\n      var value = done ? void 0 : self[i++];\n      return {\n        value: value,\n        done: done\n      };\n    }\n  };\n};\n\nfunction isRegexp(value) {\n  return Object.prototype.toString.call(value) === '[object RegExp]';\n}\n\nvar flagMap = {\n  global: 'g',\n  ignoreCase: 'i',\n  multiline: 'm',\n  dotAll: 's',\n  sticky: 'y',\n  unicode: 'u'\n};\nfunction clonedRegexp(regexp, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!isRegexp(regexp)) {\n    throw new TypeError('Expected a RegExp instance');\n  }\n\n  var flags = Object.keys(flagMap).map(function (flag) {\n    return (typeof options[flag] === 'boolean' ? options[flag] : regexp[flag]) ? flagMap[flag] : '';\n  }).join('');\n  var clonedRegexp = new RegExp(options.source || regexp.source, flags);\n  clonedRegexp.lastIndex = typeof options.lastIndex === 'number' ? options.lastIndex : regexp.lastIndex;\n  return clonedRegexp;\n}\n\nvar _$exec;\nvar supportsGroups = ('groups' in ((_$exec = /a/.exec('a')) != null ? _$exec : {}));\n/**\n * @param {RegExpExecArray?} previousMatch\n * @param {RegExpExecArray?} match\n */\n\nvar isInfiniteLoop = function isInfiniteLoop(previousMatch, match) {\n  var isLooselyTrue = (previousMatch == null ? void 0 : previousMatch[0]) === (match == null ? void 0 : match[0]) && (previousMatch == null ? void 0 : previousMatch.index) === (match == null ? void 0 : match.index);\n\n  if (isLooselyTrue) {\n    return JSON.stringify(_extends({}, previousMatch)) === JSON.stringify(_extends({}, match));\n  }\n\n  return false;\n};\n\nvar INFINITE_LOOP_ERROR = 'Infinite loop.';\n/**\n * @param {string|RegExp} matcher\n * @param {boolean}       skipCloning\n */\n\nfunction resolveMatcher(matcher, skipCloning) {\n  if (skipCloning === void 0) {\n    skipCloning = false;\n  }\n\n  if (!(matcher instanceof RegExp)) {\n    return new RegExp(matcher, 'g');\n  }\n\n  if (skipCloning) {\n    return matcher;\n  }\n\n  return clonedRegexp(matcher);\n}\n/**\n * Returns an iterator of all results matching a string against a regular expression, including capturing groups.\n *\n * @param   {string}                             string  String to match.\n * @param   {string|RegExp}                      matcher Value to match original string. If a non-`RegExp` object is passed, it is implicitly converted to a `RegExp` by using `new RegExp(regexp, 'g')`. The `RegExp` object must have the `global` flag, otherwise a `TypeError` will be thrown.\n *\n * @returns {IterableIterator<RegExpMatchArray>}\n */\n\n\nfunction ponyfill(string, matcher) {\n  if (typeof string !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  var composedMatcher = resolveMatcher(matcher);\n  var globalFlag = composedMatcher.global;\n\n  if (!globalFlag) {\n    throw new TypeError('`String.prototype.matchAll` ponyfill called with a non-global RegExp argument');\n  }\n  /** @type {RegExpMatchArray[]} */\n\n\n  var matches = [];\n  var match, previousMatch;\n\n  try {\n    previousMatch = null;\n\n    while ((match = composedMatcher.exec(string)) !== null) {\n      if (isInfiniteLoop(previousMatch, match)) {\n        throw new Error(INFINITE_LOOP_ERROR);\n      }\n\n      previousMatch = match;\n      matches.push(match);\n    }\n  } catch (error) {\n    /* istanbul ignore if */\n    if (!(error instanceof Error && error.message === INFINITE_LOOP_ERROR)) {\n      throw error;\n    }\n\n    matches.pop();\n    string.replace(composedMatcher, function (value, index, input, groups) {\n      /** @type {RegExpMatchArray} */\n      var match = [value];\n      match.index = index;\n      match.input = input;\n\n      if (supportsGroups) {\n        match.groups = groups;\n      }\n\n      matches.push(match);\n      return value;\n    });\n  }\n\n  if (typeof Symbol === 'undefined') {\n    // @ts-ignore\n    return matches[iterator]();\n  }\n\n  return matches[Symbol.iterator]();\n}\n/**\n * Returns an iterator of all results matching a string against a regular expression, including capturing groups. Uses native implementation if available.\n *\n * @param   {string}                             string  String to match.\n * @param   {string|RegExp}                      matcher Value to match original string. If a non-`RegExp` object is passed, it is implicitly converted to a `RegExp` by using `new RegExp(regexp, 'g')`. The `RegExp` object must have the `global` flag, otherwise a `TypeError` will be thrown.\n *\n * @returns {IterableIterator<RegExpMatchArray>}\n */\n\n\nfunction preferNative(string, matcher) {\n  if (typeof String.prototype.matchAll !== 'undefined') {\n    var composedMatcher = resolveMatcher(matcher, true);\n    return string.matchAll(composedMatcher);\n  }\n  /* istanbul ignore next */\n\n\n  return ponyfill(string, matcher);\n}\n\nexport { ponyfill as default, preferNative };\n//# sourceMappingURL=index.js.map\n","/* eslint-disable quote-props */\ntype CharacterMapping = {\n  [char: string]: string;\n};\n\nfunction invertMapping(obj: CharacterMapping): CharacterMapping {\n  const result: CharacterMapping = {};\n  const _keys = Object.keys(obj);\n  for (let i = 0, length = _keys.length; i < length; i++) {\n    result[obj[_keys[i]]] = _keys[i];\n  }\n  return result;\n}\n\nnamespace CarakanConst {\n  /* Regex for various type of valid Javanese glyph */\n  export const LATIN = {\n    CONSONANTS: `dh|ny|th|ng|kh|dz|sy|gh|NY|[hncrkdtswlpjymgbzfvNKTSPGB]`,\n    CONSONANTS_PANYIGEG: `ng|[rh]`,\n    CONSONANTS_MURDA: `NY|[NKTSPGB]`,\n    CONSONANTS_UPPERCASE_WITHOUT_MURDA: `DH|TH|NG|KH|DZ|SY|GH|[^N]Y|[HCRDWLJMZFV]`,\n    CONSONANTS_WITHOUT_PANYIGEG: `dh|ny|th|kh|dz|sy|gh|NY|[nckdtswlpjymgbzfvNKTSPGB]`,\n    DIGITS: `[\\\\d]`,\n    DIGITS_PUNC: `[\\\\d]+|[:()'\"|<>{}?!]`,\n    DOT_COMMA: `[.,]`,\n    SPACE: `[\\\\u0020]`,\n    VOWELS: `[aiueoxAIUEOXÉÊÈéêè]`,\n    VOWELS_SWARA: `[AIUEO]`,\n    EXCEPT_SWARA: `[^AIUEO]`,\n    CAPTURE_RESIDUE: \"(?=[A-Za-zÀ-ÿ])(dh|ny|th|ng|kh|dz|sy|gh|NY|[hncrkdtswlpjymgbzfvNKTSPGB])?(dh|ny|th|ng|kh|dz|sy|gh|NY|[hncrkdtswlpjymgbzfvNKTSPGB])?([aiueoxAIUEOXÉÈéè])?\",\n  };\n\n  export const CARAKAN = {\n    ANGKA: `[\\\\uA9D0-\\\\uA9D9]`,\n    NGLEGENA: `[\\\\uA98F-\\\\uA9B2]`,\n    CECAK_TELU: `[\\\\uA9B3]`,\n    SANDHANGAN_FINAL: `[\\\\uA980-\\\\uA983]`,\n    SWARA: `[\\\\uA984-\\\\uA98E]`,\n    SANDHANGAN: `[\\\\uA9B4-\\\\uA9BD]`,\n    CONSONANT_SIGN: `[\\\\uA9BE-\\\\uA9BF]`,\n    PANGKON: `[\\\\uA9C0]`,\n    PADA: `[\\\\uA9C1-\\\\uA9C6\\\\uA9C8-\\\\uA9CF]`, \n    PANGKAT: `[\\\\uA9C7]`\n  };\n\n  export const REGEX = {\n    CAPTURE_LATIN: [\n      `(${LATIN.DIGITS_PUNC})`,\n      `|`,\n      `(${LATIN.CONSONANTS})?`,\n      `(?!${LATIN.SPACE}(?!${LATIN.VOWELS}))`,\n      `(${LATIN.CONSONANTS})?`,\n      `(${LATIN.VOWELS})`,\n      `(${LATIN.CONSONANTS_PANYIGEG})?`,\n      `(?!${LATIN.VOWELS})`,\n      `|`,\n      `(${LATIN.CONSONANTS_WITHOUT_PANYIGEG})?`,\n      `(${LATIN.DOT_COMMA})`,\n      `(?:${LATIN.SPACE})?`,\n    ].join(\"\"),\n\n    CAPTURE_CARAKAN: [\n      `(${LATIN.SPACE})`,\n      `|(?:${CARAKAN.PANGKAT})?(${CARAKAN.ANGKA})(?:${CARAKAN.PANGKAT})?`,\n      `|(${CARAKAN.NGLEGENA})(${CARAKAN.CECAK_TELU})?(${CARAKAN.PANGKON})?(${CARAKAN.CONSONANT_SIGN})?(${CARAKAN.SANDHANGAN})?(${CARAKAN.SANDHANGAN})?(${CARAKAN.SANDHANGAN_FINAL})?`,\n      `|(${CARAKAN.SWARA})`,\n      `|(${CARAKAN.PADA})`,\n    ].join(\"\"),\n  };\n};\n\nconst LatinConst: Record<string, Record<string, string>> = {\n  ACCENTS_MAP: {\n    \"E(?!`)\": \"X\",\n    \"e(?!`)\": \"x\",\n    \"E`\": \"E\",\n    \"e`\": \"e\",\n    \"È\": \"E\",\n    \"è\": \"e\",\n    \"Ê\": \"E\",\n    \"ê\": \"e\",\n    \"É\": \"E\",\n    \"é\": \"e\",\n  },\n};\n\nnamespace CarakanChars {\n  /* Basic Javanese characters */\n  export const NGLEGENA: CharacterMapping = {\n    h: \"ꦲ\",\n    n: \"ꦤ\",\n    c: \"ꦕ\",\n    r: \"ꦫ\",\n    k: \"ꦏ\",\n    d: \"ꦢ\",\n    t: \"ꦠ\",\n    s: \"ꦱ\",\n    w: \"ꦮ\",\n    l: \"ꦭ\",\n    p: \"ꦥ\",\n    dh: \"ꦝ\",\n    j: \"ꦗ\",\n    y: \"ꦪ\",\n    ny: \"ꦚ\",\n    m: \"ꦩ\",\n    g: \"ꦒ\",\n    b: \"ꦧ\",\n    th: \"ꦛ\",\n    ng: \"ꦔ\",\n\n    /* Aksara Rekan */\n    z: \"ꦗ꦳\",\n    f: \"ꦥ꦳\",\n    v: \"ꦮ꦳\",\n    kh: \"ꦏ꦳\",\n    dz: \"ꦢ꦳\",\n    gh: \"ꦒ꦳\",\n\n    /* Aksara Murda */\n    N: \"ꦟ\",\n    K: \"ꦑ\",\n    T: \"ꦡ\",\n    S: \"ꦯ\",\n    P: \"ꦦ\",\n    NY: \"ꦘ\",\n    G: \"ꦓ\",\n    B: \"ꦨ\",\n  };\n\n  /* Swara Javanese characters */\n  export const SWARA: CharacterMapping = {\n    A: \"ꦄ\",\n    I: \"ꦅ\",\n    U: \"ꦈ\",\n    E: \"ꦌ\",\n    O: \"ꦎ\",\n\n    /* Pa Cerek, Nga Lelet */\n    rx: \"ꦉ\",\n    lx: \"ꦊ\",\n  };\n\n  /* Pasangan of plain Javanese characters */\n  export const PASANGAN: CharacterMapping = {\n    h: \"꧀ꦲ\",\n    n: \"꧀ꦤ\",\n    c: \"꧀ꦕ\",\n    r: \"꧀ꦫ\",\n    k: \"꧀ꦏ\",\n    d: \"꧀ꦢ\",\n    t: \"꧀ꦠ\",\n    s: \"꧀ꦱ\",\n    w: \"꧀ꦮ\",\n    l: \"꧀ꦭ\",\n    p: \"꧀ꦥ\",\n    dh: \"꧀ꦝ\",\n    j: \"꧀ꦗ\",\n    y: \"꧀ꦪ\",\n    ny: \"꧀ꦚ\",\n    m: \"꧀ꦩ\",\n    g: \"꧀ꦒ\",\n    b: \"꧀ꦧ\",\n    th: \"꧀ꦛ\",\n    ng: \"꧀ꦔ\",\n\n    /* Aksara Rekan */\n    z: \"꧀ꦗ꦳\",\n    f: \"꧀ꦥ꦳\",\n    v: \"꧀ꦮ꦳\",\n    kh: \"꧀ꦏ꦳\",\n    dz: \"꧀ꦢ꦳\",\n    gh: \"꧀ꦒ꦳\",\n\n    /* Aksara Murda */\n    N: \"꧀ꦟ\",\n    K: \"꧀ꦑ\",\n    T: \"꧀ꦡ\",\n    S: \"꧀ꦯ\",\n    P: \"꧀ꦦ\",\n    NY: \"꧀ꦘ\",\n    G: \"꧀ꦓ\",\n    B: \"꧀ꦨ\",\n  };\n\n  /* Sandhangan Swara */\n  export const SANDHANGAN: CharacterMapping = {\n    wulu: \"ꦶ\",\n    suku: \"ꦸ\",\n    taling: \"ꦺ\",\n    talingTarung: \"ꦺꦴ\",\n    pepet: \"ꦼ\",\n    cecak: \"ꦁ\",\n    wignyan: \"ꦃ\",\n    layar: \"ꦂ\",\n    cakra: \"ꦿ\",\n    keret: \"ꦽ\",\n    pengkal: \"ꦾ\",\n    pangkon: \"꧀\",\n  };\n\n  /* Javanese punctuation characters */\n  export const PADA: CharacterMapping = {\n    lingsa: \"꧈\",\n    lungsi: \"꧉\",\n    pangkat: \"꧇\",\n    adeg: \"꧊\",\n    adegadeg: \"꧋\",\n    piseleh: \"꧌\",\n    piselehwalik: \"꧍\",\n    rerenggankiwa: \"꧁\",\n    rerenggantengen: \"꧂\",\n  };\n\n  /* Javanese digit characters */\n  export const ANGKA: CharacterMapping = {\n    1: \"꧑\",\n    2: \"꧒\",\n    3: \"꧓\",\n    4: \"꧔\",\n    5: \"꧕\",\n    6: \"꧖\",\n    7: \"꧗\",\n    8: \"꧘\",\n    9: \"꧙\",\n    0: \"꧐\",\n  };\n\n  export const MISC: CharacterMapping = {\n    zwnj: \"‌\",\n  }\n};\n\nnamespace LatinChars {\n  export const SWARA: CharacterMapping = invertMapping({\n    A: \"ꦄ\",\n    I: \"ꦅ\",\n    U: \"ꦈ\",\n    E: \"ꦌ\",\n    O: \"ꦎ\",\n\n    /* Pa Cerek, Nga Lelet */\n    re: \"ꦉ\",\n    le: \"ꦊ\",\n  });\n  export const NGLEGENA: CharacterMapping = invertMapping(CarakanChars.NGLEGENA);\n  export const PASANGAN: CharacterMapping = invertMapping(CarakanChars.PASANGAN);\n  export const SANDHANGAN: CharacterMapping = invertMapping({\n    'i': \"ꦶ\",\n    'u': \"ꦸ\",\n    'é': \"ꦺ\",\n    'o': \"ꦺꦴ\",\n    'e': \"ꦼ\",\n    'ng': \"ꦁ\",\n    'h': \"ꦃ\",\n    'r': \"ꦂ\",\n    're': \"ꦽ\",\n  });\n  export const CONSONANT_SIGN: CharacterMapping = invertMapping({\n    'r': \"ꦿ\",\n    'y': \"ꦾ\",\n  })\n  export const PADA: CharacterMapping = invertMapping({\n    ',': \"꧈\",\n    '.': \"꧉\",\n    ':': \"꧇\",\n    '\"': \"꧊\",\n    '|': \"꧋\",\n    '<': \"꧌\",\n    '>': \"꧍\",\n    '{': \"꧁\",\n    '}': \"꧂\",\n  });\n  export const ANGKA: CharacterMapping = invertMapping(CarakanChars.ANGKA);\n  export const MISC: CharacterMapping = invertMapping(CarakanChars.MISC);\n};\n\nexport { CarakanChars, CarakanConst, LatinConst, LatinChars };\n","import { preferNative as matchAll } from \"string-match-all\";\nimport { CarakanConst, CarakanChars, LatinConst } from \"../constants/constants\";\n\n/**\n * @description Provides many helper function to get Javanese unicode characters\n */\nnamespace CarakanHelper {\n  /**\n   * @description Returns true if the input is a digit number\n   * @param str The string to be checked\n   */\n  export const isDigit = (str: string): boolean => {\n    return RegExp(CarakanConst.LATIN.DIGITS, \"g\").test(str);\n  };\n\n  /**\n   * @description Returns true if the input is a space\n   * @param str The string to be checked\n   */\n  export const isSpace = (str: string): boolean => {\n    return RegExp(CarakanConst.LATIN.SPACE, \"g\").test(str);\n  };\n\n  /**\n   * @description Returns the corresponding initial consonant character\n   * @param char The character to be converted\n   */\n  export const getMain = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in CarakanChars.SWARA) return CarakanChars.SWARA[char];\n    if (char in CarakanChars.NGLEGENA) return CarakanChars.NGLEGENA[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding sonorant consonant character\n   * @param char The character to be converted\n   */\n  export const getSonorant = (char: string): string => {\n    if (char == null) return \"\";\n    if (char === \"r\") return CarakanChars.SANDHANGAN[\"cakra\"];\n    if (char === \"y\") return CarakanChars.SANDHANGAN[\"pengkal\"];\n    if (char === \"rx\") return CarakanChars.SANDHANGAN[\"keret\"];\n    if (char in CarakanChars.PASANGAN) return CarakanChars.PASANGAN[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding vowel character\n   * @param char The character to be converted\n   */\n  export const getVowel = (char: string): string => {\n    if (char == null) return \"\";\n    switch (char.toLowerCase()) {\n      case \"a\":\n        return \"\";\n      case \"i\":\n        return CarakanChars.SANDHANGAN[\"wulu\"];\n      case \"u\":\n        return CarakanChars.SANDHANGAN[\"suku\"];\n      case \"é\":\n      case \"è\":\n      case \"e\":\n        return CarakanChars.SANDHANGAN[\"taling\"];\n      case \"o\":\n        return CarakanChars.SANDHANGAN[\"talingTarung\"];\n      case \"ə\":\n      case \"x\":\n        return CarakanChars.SANDHANGAN[\"pepet\"];\n    }\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding final character\n   * @param char The character to be converted\n   */\n  export const getFinal = (char: string): string => {\n    if (char == null) return \"\";\n    if (char === \"r\") return CarakanChars.SANDHANGAN[\"layar\"];\n    if (char === \"h\") return CarakanChars.SANDHANGAN[\"wignyan\"];\n    if (char === \"ng\") return CarakanChars.SANDHANGAN[\"cecak\"];\n    if (char === \"pangkon\") return CarakanChars.SANDHANGAN[\"pangkon\"];\n    return CarakanChars.PASANGAN[char];\n  };\n\n  /**\n   * @description Returns the corresponding punctuation character\n   * @param char The character to be converted\n   */\n  export const getPunctuation = (char: string): string => {\n    if (char == null) return \"\";\n    switch (char) {\n      case \",\":\n        return CarakanChars.PADA[\"lingsa\"];\n      case \".\":\n        return CarakanChars.PADA[\"lungsi\"];\n      case \":\":\n        return CarakanChars.PADA[\"pangkat\"];\n      case \"(\":\n      case \")\":\n      case \"'\":\n      case \"\\\"\":\n        return CarakanChars.PADA[\"adeg\"];\n      case \"|\":\n        return CarakanChars.PADA[\"adegadeg\"];\n      case \"<\":\n        return CarakanChars.PADA[\"piseleh\"];\n      case \">\":\n        return CarakanChars.PADA[\"piselehwalik\"];\n      case \"{\":\n        return CarakanChars.PADA[\"rerenggankiwa\"];\n      case \"}\":\n        return CarakanChars.PADA[\"rerenggantengen\"];\n    }\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding Javanese number character\n   * @param char The character to be converted\n   */\n  export const getNumber = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in CarakanChars.ANGKA) return CarakanChars.ANGKA[char];\n    return \"\";\n  };\n\n  /**\n   * @description Returns the corresponding miscellaneous character\n   * @param char The character to be converted\n   */\n  export const getMisc = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in CarakanChars.MISC) return CarakanChars.MISC[char];\n    return \"\";\n  };\n\n  /**\n   * @description Returns the consonant from residue\n   * @param residue The residue string\n   * @param onlyLast If true, only the last consonant will be returned\n   */\n  export const returnResidue = (residue: string): string => {\n    const groups = [...matchAll(residue, RegExp(CarakanConst.LATIN.CAPTURE_RESIDUE, \"g\"))]?.[0];\n    if (groups == null) return \"\";\n    if (groups[3] == null) {\n      return getMain(groups[1]) + getFinal(\"pangkon\");\n    } else {\n      return getMain(groups[1]) + getSonorant(groups[2]) + getVowel(groups[3]);\n    }\n  };\n\n  /**\n   * @description Remove accents from Latin text and standardize input for Carakan\n   * @param text The text to be normalized\n   */\n  export const normalizeAccents = (text: string): string => {\n    const pattern = new RegExp(Object.keys(LatinConst.ACCENTS_MAP).join(\"|\"), \"g\");\n    return text.replace(pattern, (matched) => {\n      if (matched === \"E\") matched = \"E(?!`)\";\n      if (matched === \"e\") matched = \"e(?!`)\";\n      return LatinConst.ACCENTS_MAP[matched];\n    });\n  };\n}\n\nexport default CarakanHelper;\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import CarakanHelper from \"./CarakanHelper\";\n\n/**\n * @classdesc Compiles and build the transliterated syllable into a defined order\n */\nexport class SyllableBuilder {\n  /* Parameters */\n  matchGroups: RegExpMatchArray;\n  residue: string;\n  input: string;\n  isLastOfInput: boolean;\n  /* Building blocks */\n  nonLetter: string;\n  preMain: string;\n  main: string;\n  sonorant: string;\n  afterSonorant: string;\n  vowel: string;\n  final: string;\n  postFinal: string;\n\n  constructor(matchGroups: RegExpMatchArray, residue: string, input: string, isLastOfInput: boolean) {\n    this.matchGroups = matchGroups;\n    this.residue = residue;\n    this.input = input;\n    this.isLastOfInput = isLastOfInput;\n    this.nonLetter = \"\";\n    this.preMain = \"\";\n    this.main = \"\";\n    this.sonorant = \"\";\n    this.afterSonorant = \"\";\n    this.vowel = \"\";\n    this.final = \"\";\n    this.postFinal = \"\";\n  }\n\n  build(useResidue = true): string {\n    if (useResidue) {\n      this.preMain = CarakanHelper.returnResidue(this.residue);\n    }\n    /* Get last residue on the end of input string which isn't picked up yet */\n    const finalIndex = (this.matchGroups.index as number) + this.matchGroups[0].length;\n    if (this.isLastOfInput && this.input.length > finalIndex) {\n      const lastResidue = this.input.slice(finalIndex);\n      if (!CarakanHelper.isSpace(lastResidue)) {\n        this.postFinal = CarakanHelper.getMain(lastResidue) + CarakanHelper.getFinal(\"pangkon\");\n      }\n    }\n\n    if (this.nonLetter.length > 0) return this.preMain + this.nonLetter;\n\n    return (\n      this.preMain +\n      this.main +\n      this.sonorant +\n      this.afterSonorant + // Cakra and Cakra Keret below Sandhangan\n      this.vowel +\n      this.final +\n      this.postFinal\n    );\n  }\n}\n\n/**\n * @description A simple class that helps to compile and build the transliterated syllable to Latin.\n */\nexport class LatinBuilder {\n  result: string;\n  constructor() {\n    this.result = \"\";\n  }\n  add(input: string): void {\n    this.result += input;\n  }\n  build(input?: string): string {\n    if (input) this.result = input;\n    return this.result;\n  }\n}\n","import { preferNative as matchAll } from \"string-match-all\";\nimport CarakanHelper from \"../helpers/CarakanHelper\";\nimport { SyllableBuilder } from \"../helpers/SyllableBuilder\";\nimport { CarakanConst } from \"../constants/constants\";\n\n/* TYPES */\ntype CarakanConfig = {\n  useAccents: boolean;\n  useSwara: boolean;\n  useMurda: boolean;\n};\n\n/**\n * @function toJavanese\n * @description Transliterate a string in Latin characters into its corresponding form in Javanese script.\n * @param input The input string in Latin  to be converted.\n * @param config The options for the conversion.\n * @returns The converted string in Javanese script.\n * @example\n * toCarakan(\"karya\")\n * // => \"ꦏꦂꦪ\"\n */\nexport const toJavanese = (input: string, config?: Partial<CarakanConfig>): string => {\n  config = {\n    useAccents: false,\n    useSwara: true,\n    useMurda: true,\n    ...config,\n  };\n\n  /* Normalize whitespaces */\n  input = input.trim().replace(/\\s+/g, \" \");\n  /* Lowercase all consonants except Aksara Murda */\n  input = input.replace(RegExp(CarakanConst.LATIN.CONSONANTS_UPPERCASE_WITHOUT_MURDA, \"g\"), (char) =>\n    char.toLowerCase()\n  );\n\n  /* Normalize accents in accented mode */\n  if (config.useAccents) input = CarakanHelper.normalizeAccents(input);\n  /* Make all vowels lowercase if Aksara Swara is disabled */\n  if (!config.useSwara)\n    input = input.replace(RegExp(CarakanConst.LATIN.VOWELS_SWARA, \"g\"), (char) => char.toLowerCase());\n  /* Make all Aksara Murda consonants lowercase if Aksara Murda is disabled */\n  if (!config.useMurda)\n    input = input.replace(RegExp(CarakanConst.LATIN.CONSONANTS_MURDA, \"g\"), (char) => char.toLowerCase());\n\n  /*\n   * Here, we break down the input on a per syllable basis using RegEx,\n   * iterate and feed it into the syllable converter,\n   * and append the result to the output string.\n   */\n  const syllables = [...matchAll(input, RegExp(CarakanConst.REGEX.CAPTURE_LATIN, \"g\"))];\n  let output = \"\";\n  if (syllables.length > 0) {\n    for (const [i, current] of syllables.entries()) {\n      const previous = syllables[i - 1] ?? null;\n      const isLastOfInput = i === syllables.length - 1;\n\n      let residue = \"\";\n      if (previous != null && previous.index != null) {\n        const residueIndex = previous.index + previous[0].length;\n        residue = input.slice(residueIndex, current.index);\n      } else {\n        residue = input.slice(0, current.index);\n      }\n      output += getTransliteration(current, residue, isLastOfInput);\n    }\n  }\n  return output;\n};\n\n/**\n * @description Converts the already broken down syllable into Javanese script\n */\nconst getTransliteration = (matchGroups: RegExpMatchArray, residue: string, isLastOfInput: boolean): string => {\n  /* Assign each capture groups into variable names */\n  const [\n    digits_or_punc,\n    consonant_initial,\n    consonant_sonorant,\n    vowel,\n    consonant_panyigeg,\n    consonant_final,\n    dot_or_comma,\n  ] = matchGroups.slice(1, 9);\n\n  const builder = new SyllableBuilder(matchGroups, residue, matchGroups.input as string, isLastOfInput);\n\n  /* Converts syllable containing numbers or punctuation */\n  if (digits_or_punc != null) {\n    if (CarakanHelper.isDigit(digits_or_punc)) {\n      const numbers = digits_or_punc\n        .split(\"\")\n        .map((digit: string) => CarakanHelper.getNumber(digit))\n        .join(\"\");\n      const padaPangkat = CarakanHelper.getPunctuation(\":\");\n      builder.nonLetter = padaPangkat + numbers + padaPangkat;\n    } else {\n      builder.nonLetter = CarakanHelper.getPunctuation(digits_or_punc);\n    }\n    return builder.build();\n  }\n\n  /* Converts syllable containing dots and commas */\n  if (dot_or_comma != null) {\n    if (dot_or_comma === \",\") {\n      if (consonant_final != null) {\n        builder.nonLetter =\n          CarakanHelper.getMain(consonant_final) + CarakanHelper.getFinal(\"pangkon\") + CarakanHelper.getMisc(\"zwnj\");\n      } else {\n        builder.nonLetter = CarakanHelper.getPunctuation(\",\");\n      }\n    } else {\n      if (consonant_final != null) {\n        builder.nonLetter =\n          CarakanHelper.getMain(consonant_final) +\n          CarakanHelper.getFinal(\"pangkon\") +\n          CarakanHelper.getPunctuation(\",\");\n      } else {\n        builder.nonLetter = CarakanHelper.getPunctuation(\".\");\n      }\n    }\n    return builder.build();\n  }\n\n  /* Converts syllable containing only vowels, without any initial consonants */\n  if (consonant_initial == null) {\n    if (vowel.match(RegExp(CarakanConst.LATIN.VOWELS_SWARA, \"g\"))) {\n      builder.main = CarakanHelper.getMain(vowel);\n    } else {\n      builder.main = CarakanHelper.getMain(\"h\") + CarakanHelper.getVowel(vowel);\n    }\n    builder.final = CarakanHelper.getFinal(consonant_panyigeg);\n    return builder.build();\n  }\n\n  /* Converts syllable with Cakra and Cakra Keret */\n  if (consonant_sonorant === \"r\") {\n    let useResidue = true;\n    if (residue.length > 0 && !CarakanHelper.isSpace(residue)) {\n      /* Place the Cakra/Cakra keret on the bottom of pasangan */\n      builder.main = CarakanHelper.getMain(residue);\n      builder.sonorant = CarakanHelper.getSonorant(consonant_initial);\n      if (vowel !== \"x\") {\n        builder.afterSonorant = CarakanHelper.getSonorant(\"r\");\n        builder.vowel = CarakanHelper.getVowel(vowel);\n      } else {\n        builder.afterSonorant = CarakanHelper.getSonorant(\"rx\");\n      }\n      useResidue = false;\n    } else {\n      /* Place the Cakra/Cakra keret on the bottom of main letter */\n      builder.main = CarakanHelper.getMain(consonant_initial);\n      if (vowel === \"x\") {\n        builder.sonorant = CarakanHelper.getSonorant(\"rx\");\n      } else {\n        builder.sonorant = CarakanHelper.getSonorant(consonant_sonorant);\n        builder.vowel = CarakanHelper.getVowel(vowel);\n      }\n    }\n    builder.final = CarakanHelper.getFinal(consonant_panyigeg);\n    return builder.build(useResidue);\n  }\n\n  const useGanten = consonant_initial.match(/[rl]/g) && consonant_sonorant == null && vowel === \"x\";\n  if (useGanten) {\n    builder.main = CarakanHelper.getMain(`${consonant_initial}x`);\n    builder.final = CarakanHelper.getFinal(consonant_panyigeg);\n    return builder.build();\n  }\n\n  builder.main = CarakanHelper.getMain(consonant_initial);\n  builder.sonorant = CarakanHelper.getSonorant(consonant_sonorant);\n  builder.vowel = CarakanHelper.getVowel(vowel);\n  builder.final = CarakanHelper.getFinal(consonant_panyigeg);\n  return builder.build();\n};\n","import { LatinChars } from \"../constants/constants\";\n\n/**\n * @description Provides many helper function to get Latin characters from Sundanese characters\n */\nnamespace LatinHelper {\n  /**\n   * @description Returns the corresponding Ngalagena and Swara character\n   * @param char The character to be transliterated\n   */\n  export const getLetter = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.SWARA) return LatinChars.SWARA[char];\n    if (char in LatinChars.NGLEGENA) return LatinChars.NGLEGENA[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding sonorant pasangan character\n   * @param char The character to be transliterated\n   */\n  export const getPasangan = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.PASANGAN) return LatinChars.PASANGAN[char];\n    return char;\n  };\n\n  export const getSandhangan = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.SANDHANGAN) return LatinChars.SANDHANGAN[char];\n    return char;\n  };\n\n  export const getConsonantSign = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.CONSONANT_SIGN) return LatinChars.CONSONANT_SIGN[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding pada character\n   * @param char The character to be transliterated\n   */\n  export const getPada = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.PADA) return LatinChars.PADA[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding Latin number character\n   * @param char The character to be transliterated\n   */\n  export const getNumber = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.ANGKA) return LatinChars.ANGKA[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding Miscellaneous character\n   * @param char The character to be transliterated\n   */\n  export const getMisc = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.MISC) return LatinChars.MISC[char];\n    return char;\n  };\n}\n\nexport default LatinHelper;\n","import { preferNative as matchAll } from \"string-match-all\";\nimport { CarakanConst } from \"../constants/constants\";\nimport LatinHelper from \"../helpers/LatinHelper\";\nimport { LatinBuilder } from \"../helpers/SyllableBuilder\";\n\n/**\n * @function toLatin\n * @description Transliterate a string in Javanese characters into its corresponding form in Latin.\n * @param input The input string in Javanese script to be converted.\n * @returns The converted string in Latin.\n * @example\n * toLatin(\"ꦏꦂꦪ\")\n * // => karya\n */\nexport const toLatin = (input: string): string => {\n  /* Trim input */\n  input = input.trim();\n\n  /*\n   * Here, we break down the input on a per-syllable basis using RegEx,\n   * iterate and feed it into the syllable transliterator,\n   * and append the result to the output string.\n   */\n  const syllables = [...matchAll(input, RegExp(CarakanConst.REGEX.CAPTURE_CARAKAN, \"g\"))];\n\n  let output = \"\";\n  if (syllables.length > 0) {\n    for (const group of syllables) {\n      output += getTransliteration(group);\n    }\n  }\n  return output;\n};\n\n/**\n * @description Converts the already broken down syllable into Sundanese script\n */\nconst getTransliteration = (groups: RegExpMatchArray): string => {\n  /* Assign each capture groups into variable names */\n  const [\n    space,\n    angka,\n    ngalagena,\n    cecak_telu,\n    pangkon,\n    con_sign,\n    sandhangan1,\n    sandhangan2,\n    sandhangan_final,\n    swara,\n    pada,\n  ] = groups.slice(1, 12);\n\n  const builder = new LatinBuilder();\n\n  /* Converts syllable containing numbers */\n  if (angka != null) {\n    return builder.build(LatinHelper.getNumber(angka));\n  }\n\n  /* Converts syllable containing letters */\n  if (ngalagena != null) {\n    /* Add cecak telu to get loan letter if cecak telu indeed exists in the syllable */\n    builder.add(LatinHelper.getLetter(ngalagena + (cecak_telu ?? \"\")));\n\n    /* if there's no pangkon, there might be consonant sign or sandhangan*/\n    if (pangkon == null) {\n      /* Converts consonant sign */\n      if (con_sign != null) {\n        builder.add(LatinHelper.getConsonantSign(con_sign));\n      }\n\n      /* Converts sandhangan */\n      if (sandhangan1 != null && sandhangan2 == null) {\n        builder.add(LatinHelper.getSandhangan(sandhangan1));\n      } else if (sandhangan1 != null && sandhangan2 != null) {\n        /* Sandhangan2 in case of taling-tarung */\n        builder.add(LatinHelper.getSandhangan(sandhangan1 + sandhangan2));\n      } else {\n        builder.add(\"a\");\n      }\n\n      /* Converts final sandhangan */\n      if (sandhangan_final != null) {\n        builder.add(LatinHelper.getSandhangan(sandhangan_final));\n      }\n    }\n  }\n\n  if (swara != null) {\n    /* Converts swara */\n    builder.add(LatinHelper.getLetter(swara));\n  }\n\n  if (pada != null) {\n    /* Converts pada */\n    builder.add(LatinHelper.getPada(pada));\n  }\n\n  if (space != null) {\n    /* Modern Carakan is not scriptio continuo, so add space if it exists */\n    builder.add(\" \");\n  }\n\n  return builder.build();\n};\n\nexport default toLatin;\n"],"names":["_arrayLikeToArray","_unsupportedIterableToArray","arrayLikeToArray","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","arrayWithoutHoles","iterableToArray","nonIterableSpread","invertMapping","obj","result","_keys","Object","keys","i","length","LATIN","CONSONANTS","CONSONANTS_PANYIGEG","CONSONANTS_MURDA","CONSONANTS_UPPERCASE_WITHOUT_MURDA","CONSONANTS_WITHOUT_PANYIGEG","DIGITS","DIGITS_PUNC","DOT_COMMA","SPACE","VOWELS","VOWELS_SWARA","EXCEPT_SWARA","CAPTURE_RESIDUE","CARAKAN","ANGKA","NGLEGENA","CECAK_TELU","SANDHANGAN_FINAL","SWARA","SANDHANGAN","CONSONANT_SIGN","PANGKON","PADA","PANGKAT","CAPTURE_LATIN","join","CAPTURE_CARAKAN","CarakanConst","LatinConst","ACCENTS_MAP","h","n","c","r","k","d","t","s","w","l","p","dh","j","y","ny","m","g","b","th","ng","z","f","v","kh","dz","gh","N","K","T","S","P","NY","G","B","A","I","U","E","O","rx","lx","wulu","suku","taling","talingTarung","pepet","cecak","wignyan","layar","cakra","keret","pengkal","pangkon","lingsa","lungsi","pangkat","adeg","adegadeg","piseleh","piselehwalik","rerenggankiwa","rerenggantengen","zwnj","CarakanChars","re","le","PASANGAN","MISC","LatinChars","str","RegExp","test","getMain","char","getSonorant","getVowel","toLowerCase","getFinal","residue","groups","matchAll","text","pattern","replace","matched","CarakanHelper","SyllableBuilder","matchGroups","input","isLastOfInput","nonLetter","preMain","main","sonorant","afterSonorant","vowel","postFinal","useResidue","returnResidue","finalIndex","index","lastResidue","slice","isSpace","LatinBuilder","toJavanese","config","useAccents","useSwara","useMurda","trim","normalizeAccents","syllables","REGEX","output","entries","current","previous","residueIndex","getTransliteration","digits_or_punc","consonant_initial","consonant_sonorant","consonant_panyigeg","consonant_final","dot_or_comma","builder","isDigit","numbers","split","map","digit","getNumber","padaPangkat","getPunctuation","build","getMisc","match","useGanten","LatinHelper","toLatin","group","space","angka","ngalagena","cecak_telu","con_sign","sandhangan1","sandhangan2","sandhangan_final","swara","pada","add","getLetter","getConsonantSign","getSandhangan","getPada"],"mappings":"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"}