{"version":3,"file":"index.js","sources":["../../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../node_modules/string-match-all/esm/index.js","../../src/constants/constants.ts","../../src/helpers/CarakanHelper.ts","../../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../../node_modules/@babel/runtime/helpers/esm/createClass.js","../../src/helpers/SyllableBuilder.ts","../../src/functions/toJavanese.ts","../../src/helpers/LatinHelper.ts","../../src/functions/toLatin.ts"],"sourcesContent":["export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\n/*! (c) Andrea Giammarchi - ISC */\n// requires a global Symbol\nvar iterator = /* istanbul ignore next */\nfunction () {\n  var i = 0;\n  var self = this;\n  return {\n    next: function () {\n      var done = self.length <= i;\n      var value = done ? void 0 : self[i++];\n      return {\n        value: value,\n        done: done\n      };\n    }\n  };\n};\n\nfunction isRegexp(value) {\n  return Object.prototype.toString.call(value) === '[object RegExp]';\n}\n\nvar flagMap = {\n  global: 'g',\n  ignoreCase: 'i',\n  multiline: 'm',\n  dotAll: 's',\n  sticky: 'y',\n  unicode: 'u'\n};\nfunction clonedRegexp(regexp, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!isRegexp(regexp)) {\n    throw new TypeError('Expected a RegExp instance');\n  }\n\n  var flags = Object.keys(flagMap).map(function (flag) {\n    return (typeof options[flag] === 'boolean' ? options[flag] : regexp[flag]) ? flagMap[flag] : '';\n  }).join('');\n  var clonedRegexp = new RegExp(options.source || regexp.source, flags);\n  clonedRegexp.lastIndex = typeof options.lastIndex === 'number' ? options.lastIndex : regexp.lastIndex;\n  return clonedRegexp;\n}\n\nvar _$exec;\nvar supportsGroups = ('groups' in ((_$exec = /a/.exec('a')) != null ? _$exec : {}));\n/**\n * @param {RegExpExecArray?} previousMatch\n * @param {RegExpExecArray?} match\n */\n\nvar isInfiniteLoop = function isInfiniteLoop(previousMatch, match) {\n  var isLooselyTrue = (previousMatch == null ? void 0 : previousMatch[0]) === (match == null ? void 0 : match[0]) && (previousMatch == null ? void 0 : previousMatch.index) === (match == null ? void 0 : match.index);\n\n  if (isLooselyTrue) {\n    return JSON.stringify(_extends({}, previousMatch)) === JSON.stringify(_extends({}, match));\n  }\n\n  return false;\n};\n\nvar INFINITE_LOOP_ERROR = 'Infinite loop.';\n/**\n * @param {string|RegExp} matcher\n * @param {boolean}       skipCloning\n */\n\nfunction resolveMatcher(matcher, skipCloning) {\n  if (skipCloning === void 0) {\n    skipCloning = false;\n  }\n\n  if (!(matcher instanceof RegExp)) {\n    return new RegExp(matcher, 'g');\n  }\n\n  if (skipCloning) {\n    return matcher;\n  }\n\n  return clonedRegexp(matcher);\n}\n/**\n * Returns an iterator of all results matching a string against a regular expression, including capturing groups.\n *\n * @param   {string}                             string  String to match.\n * @param   {string|RegExp}                      matcher Value to match original string. If a non-`RegExp` object is passed, it is implicitly converted to a `RegExp` by using `new RegExp(regexp, 'g')`. The `RegExp` object must have the `global` flag, otherwise a `TypeError` will be thrown.\n *\n * @returns {IterableIterator<RegExpMatchArray>}\n */\n\n\nfunction ponyfill(string, matcher) {\n  if (typeof string !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  var composedMatcher = resolveMatcher(matcher);\n  var globalFlag = composedMatcher.global;\n\n  if (!globalFlag) {\n    throw new TypeError('`String.prototype.matchAll` ponyfill called with a non-global RegExp argument');\n  }\n  /** @type {RegExpMatchArray[]} */\n\n\n  var matches = [];\n  var match, previousMatch;\n\n  try {\n    previousMatch = null;\n\n    while ((match = composedMatcher.exec(string)) !== null) {\n      if (isInfiniteLoop(previousMatch, match)) {\n        throw new Error(INFINITE_LOOP_ERROR);\n      }\n\n      previousMatch = match;\n      matches.push(match);\n    }\n  } catch (error) {\n    /* istanbul ignore if */\n    if (!(error instanceof Error && error.message === INFINITE_LOOP_ERROR)) {\n      throw error;\n    }\n\n    matches.pop();\n    string.replace(composedMatcher, function (value, index, input, groups) {\n      /** @type {RegExpMatchArray} */\n      var match = [value];\n      match.index = index;\n      match.input = input;\n\n      if (supportsGroups) {\n        match.groups = groups;\n      }\n\n      matches.push(match);\n      return value;\n    });\n  }\n\n  if (typeof Symbol === 'undefined') {\n    // @ts-ignore\n    return matches[iterator]();\n  }\n\n  return matches[Symbol.iterator]();\n}\n/**\n * Returns an iterator of all results matching a string against a regular expression, including capturing groups. Uses native implementation if available.\n *\n * @param   {string}                             string  String to match.\n * @param   {string|RegExp}                      matcher Value to match original string. If a non-`RegExp` object is passed, it is implicitly converted to a `RegExp` by using `new RegExp(regexp, 'g')`. The `RegExp` object must have the `global` flag, otherwise a `TypeError` will be thrown.\n *\n * @returns {IterableIterator<RegExpMatchArray>}\n */\n\n\nfunction preferNative(string, matcher) {\n  if (typeof String.prototype.matchAll !== 'undefined') {\n    var composedMatcher = resolveMatcher(matcher, true);\n    return string.matchAll(composedMatcher);\n  }\n  /* istanbul ignore next */\n\n\n  return ponyfill(string, matcher);\n}\n\nexport { ponyfill as default, preferNative };\n//# sourceMappingURL=index.js.map\n","/* eslint-disable quote-props */\ntype CharacterMapping = {\n  [char: string]: string;\n};\n\nfunction invertMapping(obj: CharacterMapping): CharacterMapping {\n  const result: CharacterMapping = {};\n  const _keys = Object.keys(obj);\n  for (let i = 0, length = _keys.length; i < length; i++) {\n    result[obj[_keys[i]]] = _keys[i];\n  }\n  return result;\n}\n\nnamespace CarakanConst {\n  /* Regex for various type of valid Javanese glyph */\n  export const LATIN = {\n    CONSONANTS: `dh|ny|th|ng|kh|dz|sy|gh|NY|[hncrkdtswlpjymgbzfvNKTSPGB]`,\n    CONSONANTS_PANYIGEG: `ng|[rh]`,\n    CONSONANTS_MURDA: `NY|[NKTSPGB]`,\n    CONSONANTS_UPPERCASE_WITHOUT_MURDA: `DH|TH|NG|KH|DZ|SY|GH|[^N]Y|[HCRDWLJMZFV]`,\n    CONSONANTS_WITHOUT_PANYIGEG: `dh|ny|th|kh|dz|sy|gh|NY|[nckdtswlpjymgbzfvNKTSPGB]`,\n    DIGITS: `[\\\\d]`,\n    DIGITS_PUNC: `[\\\\d]+|[:()'\"|<>{}?!]`,\n    DOT_COMMA: `[.,]`,\n    SPACE: `[\\\\u0020]`,\n    VOWELS: `[aiueoxAIUEOXÉÊÈéêè]`,\n    VOWELS_SWARA: `[AIUEO]`,\n    EXCEPT_SWARA: `[^AIUEO]`,\n    CAPTURE_RESIDUE: \"(?=[A-Za-zÀ-ÿ])(dh|ny|th|ng|kh|dz|sy|gh|NY|[hncrkdtswlpjymgbzfvNKTSPGB])?(dh|ny|th|ng|kh|dz|sy|gh|NY|[hncrkdtswlpjymgbzfvNKTSPGB])?([aiueoxAIUEOXÉÈéè])?\",\n  };\n\n  export const CARAKAN = {\n    ANGKA: `[\\\\uA9D0-\\\\uA9D9]`,\n    NGLEGENA: `[\\\\uA98F-\\\\uA9B2]`,\n    CECAK_TELU: `[\\\\uA9B3]`,\n    SANDHANGAN_FINAL: `[\\\\uA980-\\\\uA983]`,\n    SWARA: `[\\\\uA984-\\\\uA98E]`,\n    SANDHANGAN: `[\\\\uA9B4-\\\\uA9BD]`,\n    CONSONANT_SIGN: `[\\\\uA9BE-\\\\uA9BF]`,\n    PANGKON: `[\\\\uA9C0]`,\n    PADA: `[\\\\uA9C1-\\\\uA9C6\\\\uA9C8-\\\\uA9CF]`, \n    PANGKAT: `[\\\\uA9C7]`\n  };\n\n  export const REGEX = {\n    CAPTURE_LATIN: [\n      `(${LATIN.DIGITS_PUNC})`,\n      `|`,\n      `(${LATIN.CONSONANTS})?`,\n      `(?!${LATIN.SPACE}(?!${LATIN.VOWELS}))`,\n      `(${LATIN.CONSONANTS})?`,\n      `(${LATIN.VOWELS})`,\n      `(${LATIN.CONSONANTS_PANYIGEG})?`,\n      `(?!${LATIN.VOWELS})`,\n      `|`,\n      `(${LATIN.CONSONANTS_WITHOUT_PANYIGEG})?`,\n      `(${LATIN.DOT_COMMA})`,\n      `(?:${LATIN.SPACE})?`,\n    ].join(\"\"),\n\n    CAPTURE_CARAKAN: [\n      `(${LATIN.SPACE})`,\n      `|(?:${CARAKAN.PANGKAT})?(${CARAKAN.ANGKA})(?:${CARAKAN.PANGKAT})?`,\n      `|(${CARAKAN.NGLEGENA})(${CARAKAN.CECAK_TELU})?(${CARAKAN.PANGKON})?(${CARAKAN.CONSONANT_SIGN})?(${CARAKAN.SANDHANGAN})?(${CARAKAN.SANDHANGAN})?(${CARAKAN.SANDHANGAN_FINAL})?`,\n      `|(${CARAKAN.SWARA})`,\n      `|(${CARAKAN.PADA})`,\n    ].join(\"\"),\n  };\n};\n\nconst LatinConst: Record<string, Record<string, string>> = {\n  ACCENTS_MAP: {\n    \"E(?!`)\": \"X\",\n    \"e(?!`)\": \"x\",\n    \"E`\": \"E\",\n    \"e`\": \"e\",\n    \"È\": \"E\",\n    \"è\": \"e\",\n    \"Ê\": \"E\",\n    \"ê\": \"e\",\n    \"É\": \"E\",\n    \"é\": \"e\",\n  },\n};\n\nnamespace CarakanChars {\n  /* Basic Javanese characters */\n  export const NGLEGENA: CharacterMapping = {\n    h: \"ꦲ\",\n    n: \"ꦤ\",\n    c: \"ꦕ\",\n    r: \"ꦫ\",\n    k: \"ꦏ\",\n    d: \"ꦢ\",\n    t: \"ꦠ\",\n    s: \"ꦱ\",\n    w: \"ꦮ\",\n    l: \"ꦭ\",\n    p: \"ꦥ\",\n    dh: \"ꦝ\",\n    j: \"ꦗ\",\n    y: \"ꦪ\",\n    ny: \"ꦚ\",\n    m: \"ꦩ\",\n    g: \"ꦒ\",\n    b: \"ꦧ\",\n    th: \"ꦛ\",\n    ng: \"ꦔ\",\n\n    /* Aksara Rekan */\n    z: \"ꦗ꦳\",\n    f: \"ꦥ꦳\",\n    v: \"ꦮ꦳\",\n    kh: \"ꦏ꦳\",\n    dz: \"ꦢ꦳\",\n    gh: \"ꦒ꦳\",\n\n    /* Aksara Murda */\n    N: \"ꦟ\",\n    K: \"ꦑ\",\n    T: \"ꦡ\",\n    S: \"ꦯ\",\n    P: \"ꦦ\",\n    NY: \"ꦘ\",\n    G: \"ꦓ\",\n    B: \"ꦨ\",\n  };\n\n  /* Swara Javanese characters */\n  export const SWARA: CharacterMapping = {\n    A: \"ꦄ\",\n    I: \"ꦅ\",\n    U: \"ꦈ\",\n    E: \"ꦌ\",\n    O: \"ꦎ\",\n\n    /* Pa Cerek, Nga Lelet */\n    rx: \"ꦉ\",\n    lx: \"ꦊ\",\n  };\n\n  /* Pasangan of plain Javanese characters */\n  export const PASANGAN: CharacterMapping = {\n    h: \"꧀ꦲ\",\n    n: \"꧀ꦤ\",\n    c: \"꧀ꦕ\",\n    r: \"꧀ꦫ\",\n    k: \"꧀ꦏ\",\n    d: \"꧀ꦢ\",\n    t: \"꧀ꦠ\",\n    s: \"꧀ꦱ\",\n    w: \"꧀ꦮ\",\n    l: \"꧀ꦭ\",\n    p: \"꧀ꦥ\",\n    dh: \"꧀ꦝ\",\n    j: \"꧀ꦗ\",\n    y: \"꧀ꦪ\",\n    ny: \"꧀ꦚ\",\n    m: \"꧀ꦩ\",\n    g: \"꧀ꦒ\",\n    b: \"꧀ꦧ\",\n    th: \"꧀ꦛ\",\n    ng: \"꧀ꦔ\",\n\n    /* Aksara Rekan */\n    z: \"꧀ꦗ꦳\",\n    f: \"꧀ꦥ꦳\",\n    v: \"꧀ꦮ꦳\",\n    kh: \"꧀ꦏ꦳\",\n    dz: \"꧀ꦢ꦳\",\n    gh: \"꧀ꦒ꦳\",\n\n    /* Aksara Murda */\n    N: \"꧀ꦟ\",\n    K: \"꧀ꦑ\",\n    T: \"꧀ꦡ\",\n    S: \"꧀ꦯ\",\n    P: \"꧀ꦦ\",\n    NY: \"꧀ꦘ\",\n    G: \"꧀ꦓ\",\n    B: \"꧀ꦨ\",\n  };\n\n  /* Sandhangan Swara */\n  export const SANDHANGAN: CharacterMapping = {\n    wulu: \"ꦶ\",\n    suku: \"ꦸ\",\n    taling: \"ꦺ\",\n    talingTarung: \"ꦺꦴ\",\n    pepet: \"ꦼ\",\n    cecak: \"ꦁ\",\n    wignyan: \"ꦃ\",\n    layar: \"ꦂ\",\n    cakra: \"ꦿ\",\n    keret: \"ꦽ\",\n    pengkal: \"ꦾ\",\n    pangkon: \"꧀\",\n  };\n\n  /* Javanese punctuation characters */\n  export const PADA: CharacterMapping = {\n    lingsa: \"꧈\",\n    lungsi: \"꧉\",\n    pangkat: \"꧇\",\n    adeg: \"꧊\",\n    adegadeg: \"꧋\",\n    piseleh: \"꧌\",\n    piselehwalik: \"꧍\",\n    rerenggankiwa: \"꧁\",\n    rerenggantengen: \"꧂\",\n  };\n\n  /* Javanese digit characters */\n  export const ANGKA: CharacterMapping = {\n    1: \"꧑\",\n    2: \"꧒\",\n    3: \"꧓\",\n    4: \"꧔\",\n    5: \"꧕\",\n    6: \"꧖\",\n    7: \"꧗\",\n    8: \"꧘\",\n    9: \"꧙\",\n    0: \"꧐\",\n  };\n\n  export const MISC: CharacterMapping = {\n    zwnj: \"‌\",\n  }\n};\n\nnamespace LatinChars {\n  export const SWARA: CharacterMapping = invertMapping({\n    A: \"ꦄ\",\n    I: \"ꦅ\",\n    U: \"ꦈ\",\n    E: \"ꦌ\",\n    O: \"ꦎ\",\n\n    /* Pa Cerek, Nga Lelet */\n    re: \"ꦉ\",\n    le: \"ꦊ\",\n  });\n  export const NGLEGENA: CharacterMapping = invertMapping(CarakanChars.NGLEGENA);\n  export const PASANGAN: CharacterMapping = invertMapping(CarakanChars.PASANGAN);\n  export const SANDHANGAN: CharacterMapping = invertMapping({\n    'i': \"ꦶ\",\n    'u': \"ꦸ\",\n    'é': \"ꦺ\",\n    'o': \"ꦺꦴ\",\n    'e': \"ꦼ\",\n    'ng': \"ꦁ\",\n    'h': \"ꦃ\",\n    'r': \"ꦂ\",\n    're': \"ꦽ\",\n  });\n  export const CONSONANT_SIGN: CharacterMapping = invertMapping({\n    'r': \"ꦿ\",\n    'y': \"ꦾ\",\n  })\n  export const PADA: CharacterMapping = invertMapping({\n    ',': \"꧈\",\n    '.': \"꧉\",\n    ':': \"꧇\",\n    '\"': \"꧊\",\n    '|': \"꧋\",\n    '<': \"꧌\",\n    '>': \"꧍\",\n    '{': \"꧁\",\n    '}': \"꧂\",\n  });\n  export const ANGKA: CharacterMapping = invertMapping(CarakanChars.ANGKA);\n  export const MISC: CharacterMapping = invertMapping(CarakanChars.MISC);\n};\n\nexport { CarakanChars, CarakanConst, LatinConst, LatinChars };\n","import { preferNative as matchAll } from \"string-match-all\";\nimport { CarakanConst, CarakanChars, LatinConst } from \"../constants/constants\";\n\n/**\n * @description Provides many helper function to get Javanese unicode characters\n */\nnamespace CarakanHelper {\n  /**\n   * @description Returns true if the input is a digit number\n   * @param str The string to be checked\n   */\n  export const isDigit = (str: string): boolean => {\n    return RegExp(CarakanConst.LATIN.DIGITS, \"g\").test(str);\n  };\n\n  /**\n   * @description Returns true if the input is a space\n   * @param str The string to be checked\n   */\n  export const isSpace = (str: string): boolean => {\n    return RegExp(CarakanConst.LATIN.SPACE, \"g\").test(str);\n  };\n\n  /**\n   * @description Returns the corresponding initial consonant character\n   * @param char The character to be converted\n   */\n  export const getMain = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in CarakanChars.SWARA) return CarakanChars.SWARA[char];\n    if (char in CarakanChars.NGLEGENA) return CarakanChars.NGLEGENA[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding sonorant consonant character\n   * @param char The character to be converted\n   */\n  export const getSonorant = (char: string): string => {\n    if (char == null) return \"\";\n    if (char === \"r\") return CarakanChars.SANDHANGAN[\"cakra\"];\n    if (char === \"y\") return CarakanChars.SANDHANGAN[\"pengkal\"];\n    if (char === \"rx\") return CarakanChars.SANDHANGAN[\"keret\"];\n    if (char in CarakanChars.PASANGAN) return CarakanChars.PASANGAN[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding vowel character\n   * @param char The character to be converted\n   */\n  export const getVowel = (char: string): string => {\n    if (char == null) return \"\";\n    switch (char.toLowerCase()) {\n      case \"a\":\n        return \"\";\n      case \"i\":\n        return CarakanChars.SANDHANGAN[\"wulu\"];\n      case \"u\":\n        return CarakanChars.SANDHANGAN[\"suku\"];\n      case \"é\":\n      case \"è\":\n      case \"e\":\n        return CarakanChars.SANDHANGAN[\"taling\"];\n      case \"o\":\n        return CarakanChars.SANDHANGAN[\"talingTarung\"];\n      case \"ə\":\n      case \"x\":\n        return CarakanChars.SANDHANGAN[\"pepet\"];\n    }\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding final character\n   * @param char The character to be converted\n   */\n  export const getFinal = (char: string): string => {\n    if (char == null) return \"\";\n    if (char === \"r\") return CarakanChars.SANDHANGAN[\"layar\"];\n    if (char === \"h\") return CarakanChars.SANDHANGAN[\"wignyan\"];\n    if (char === \"ng\") return CarakanChars.SANDHANGAN[\"cecak\"];\n    if (char === \"pangkon\") return CarakanChars.SANDHANGAN[\"pangkon\"];\n    return CarakanChars.PASANGAN[char];\n  };\n\n  /**\n   * @description Returns the corresponding punctuation character\n   * @param char The character to be converted\n   */\n  export const getPunctuation = (char: string): string => {\n    if (char == null) return \"\";\n    switch (char) {\n      case \",\":\n        return CarakanChars.PADA[\"lingsa\"];\n      case \".\":\n        return CarakanChars.PADA[\"lungsi\"];\n      case \":\":\n        return CarakanChars.PADA[\"pangkat\"];\n      case \"(\":\n      case \")\":\n      case \"'\":\n      case \"\\\"\":\n        return CarakanChars.PADA[\"adeg\"];\n      case \"|\":\n        return CarakanChars.PADA[\"adegadeg\"];\n      case \"<\":\n        return CarakanChars.PADA[\"piseleh\"];\n      case \">\":\n        return CarakanChars.PADA[\"piselehwalik\"];\n      case \"{\":\n        return CarakanChars.PADA[\"rerenggankiwa\"];\n      case \"}\":\n        return CarakanChars.PADA[\"rerenggantengen\"];\n    }\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding Javanese number character\n   * @param char The character to be converted\n   */\n  export const getNumber = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in CarakanChars.ANGKA) return CarakanChars.ANGKA[char];\n    return \"\";\n  };\n\n  /**\n   * @description Returns the corresponding miscellaneous character\n   * @param char The character to be converted\n   */\n  export const getMisc = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in CarakanChars.MISC) return CarakanChars.MISC[char];\n    return \"\";\n  };\n\n  /**\n   * @description Returns the consonant from residue\n   * @param residue The residue string\n   * @param onlyLast If true, only the last consonant will be returned\n   */\n  export const returnResidue = (residue: string): string => {\n    const groups = [...matchAll(residue, RegExp(CarakanConst.LATIN.CAPTURE_RESIDUE, \"g\"))]?.[0];\n    if (groups == null) return \"\";\n    if (groups[3] == null) {\n      return getMain(groups[1]) + getFinal(\"pangkon\");\n    } else {\n      return getMain(groups[1]) + getSonorant(groups[2]) + getVowel(groups[3]);\n    }\n  };\n\n  /**\n   * @description Remove accents from Latin text and standardize input for Carakan\n   * @param text The text to be normalized\n   */\n  export const normalizeAccents = (text: string): string => {\n    const pattern = new RegExp(Object.keys(LatinConst.ACCENTS_MAP).join(\"|\"), \"g\");\n    return text.replace(pattern, (matched) => {\n      if (matched === \"E\") matched = \"E(?!`)\";\n      if (matched === \"e\") matched = \"e(?!`)\";\n      return LatinConst.ACCENTS_MAP[matched];\n    });\n  };\n}\n\nexport default CarakanHelper;\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import CarakanHelper from \"./CarakanHelper\";\n\n/**\n * @classdesc Compiles and build the transliterated syllable into a defined order\n */\nexport class SyllableBuilder {\n  /* Parameters */\n  matchGroups: RegExpMatchArray;\n  residue: string;\n  input: string;\n  isLastOfInput: boolean;\n  /* Building blocks */\n  nonLetter: string;\n  preMain: string;\n  main: string;\n  sonorant: string;\n  afterSonorant: string;\n  vowel: string;\n  final: string;\n  postFinal: string;\n\n  constructor(matchGroups: RegExpMatchArray, residue: string, input: string, isLastOfInput: boolean) {\n    this.matchGroups = matchGroups;\n    this.residue = residue;\n    this.input = input;\n    this.isLastOfInput = isLastOfInput;\n    this.nonLetter = \"\";\n    this.preMain = \"\";\n    this.main = \"\";\n    this.sonorant = \"\";\n    this.afterSonorant = \"\";\n    this.vowel = \"\";\n    this.final = \"\";\n    this.postFinal = \"\";\n  }\n\n  build(useResidue = true): string {\n    if (useResidue) {\n      this.preMain = CarakanHelper.returnResidue(this.residue);\n    }\n    /* Get last residue on the end of input string which isn't picked up yet */\n    const finalIndex = (this.matchGroups.index as number) + this.matchGroups[0].length;\n    if (this.isLastOfInput && this.input.length > finalIndex) {\n      const lastResidue = this.input.slice(finalIndex);\n      if (!CarakanHelper.isSpace(lastResidue)) {\n        this.postFinal = CarakanHelper.getMain(lastResidue) + CarakanHelper.getFinal(\"pangkon\");\n      }\n    }\n\n    if (this.nonLetter.length > 0) return this.preMain + this.nonLetter;\n\n    return (\n      this.preMain +\n      this.main +\n      this.sonorant +\n      this.afterSonorant + // Cakra and Cakra Keret below Sandhangan\n      this.vowel +\n      this.final +\n      this.postFinal\n    );\n  }\n}\n\n/**\n * @description A simple class that helps to compile and build the transliterated syllable to Latin.\n */\nexport class LatinBuilder {\n  result: string;\n  constructor() {\n    this.result = \"\";\n  }\n  add(input: string): void {\n    this.result += input;\n  }\n  build(input?: string): string {\n    if (input) this.result = input;\n    return this.result;\n  }\n}\n","import { preferNative as matchAll } from \"string-match-all\";\nimport CarakanHelper from \"../helpers/CarakanHelper\";\nimport { SyllableBuilder } from \"../helpers/SyllableBuilder\";\nimport { CarakanConst } from \"../constants/constants\";\n\n/* TYPES */\ntype CarakanConfig = {\n  useAccents: boolean;\n  useSwara: boolean;\n  useMurda: boolean;\n};\n\n/**\n * @function toJavanese\n * @description Transliterate a string in Latin characters into its corresponding form in Javanese script.\n * @param input The input string in Latin  to be converted.\n * @param config The options for the conversion.\n * @returns The converted string in Javanese script.\n * @example\n * toCarakan(\"karya\")\n * // => \"ꦏꦂꦪ\"\n */\nexport const toJavanese = (input: string, config?: Partial<CarakanConfig>): string => {\n  config = {\n    useAccents: false,\n    useSwara: true,\n    useMurda: true,\n    ...config,\n  };\n\n  /* Normalize whitespaces */\n  input = input.trim().replace(/\\s+/g, \" \");\n  /* Lowercase all consonants except Aksara Murda */\n  input = input.replace(RegExp(CarakanConst.LATIN.CONSONANTS_UPPERCASE_WITHOUT_MURDA, \"g\"), (char) =>\n    char.toLowerCase()\n  );\n\n  /* Normalize accents in accented mode */\n  if (config.useAccents) input = CarakanHelper.normalizeAccents(input);\n  /* Make all vowels lowercase if Aksara Swara is disabled */\n  if (!config.useSwara)\n    input = input.replace(RegExp(CarakanConst.LATIN.VOWELS_SWARA, \"g\"), (char) => char.toLowerCase());\n  /* Make all Aksara Murda consonants lowercase if Aksara Murda is disabled */\n  if (!config.useMurda)\n    input = input.replace(RegExp(CarakanConst.LATIN.CONSONANTS_MURDA, \"g\"), (char) => char.toLowerCase());\n\n  /*\n   * Here, we break down the input on a per syllable basis using RegEx,\n   * iterate and feed it into the syllable converter,\n   * and append the result to the output string.\n   */\n  const syllables = [...matchAll(input, RegExp(CarakanConst.REGEX.CAPTURE_LATIN, \"g\"))];\n  let output = \"\";\n  if (syllables.length > 0) {\n    for (const [i, current] of syllables.entries()) {\n      const previous = syllables[i - 1] ?? null;\n      const isLastOfInput = i === syllables.length - 1;\n\n      let residue = \"\";\n      if (previous != null && previous.index != null) {\n        const residueIndex = previous.index + previous[0].length;\n        residue = input.slice(residueIndex, current.index);\n      } else {\n        residue = input.slice(0, current.index);\n      }\n      output += getTransliteration(current, residue, isLastOfInput);\n    }\n  }\n  return output;\n};\n\n/**\n * @description Converts the already broken down syllable into Javanese script\n */\nconst getTransliteration = (matchGroups: RegExpMatchArray, residue: string, isLastOfInput: boolean): string => {\n  /* Assign each capture groups into variable names */\n  const [\n    digits_or_punc,\n    consonant_initial,\n    consonant_sonorant,\n    vowel,\n    consonant_panyigeg,\n    consonant_final,\n    dot_or_comma,\n  ] = matchGroups.slice(1, 9);\n\n  const builder = new SyllableBuilder(matchGroups, residue, matchGroups.input as string, isLastOfInput);\n\n  /* Converts syllable containing numbers or punctuation */\n  if (digits_or_punc != null) {\n    if (CarakanHelper.isDigit(digits_or_punc)) {\n      const numbers = digits_or_punc\n        .split(\"\")\n        .map((digit: string) => CarakanHelper.getNumber(digit))\n        .join(\"\");\n      const padaPangkat = CarakanHelper.getPunctuation(\":\");\n      builder.nonLetter = padaPangkat + numbers + padaPangkat;\n    } else {\n      builder.nonLetter = CarakanHelper.getPunctuation(digits_or_punc);\n    }\n    return builder.build();\n  }\n\n  /* Converts syllable containing dots and commas */\n  if (dot_or_comma != null) {\n    if (dot_or_comma === \",\") {\n      if (consonant_final != null) {\n        builder.nonLetter =\n          CarakanHelper.getMain(consonant_final) + CarakanHelper.getFinal(\"pangkon\") + CarakanHelper.getMisc(\"zwnj\");\n      } else {\n        builder.nonLetter = CarakanHelper.getPunctuation(\",\");\n      }\n    } else {\n      if (consonant_final != null) {\n        builder.nonLetter =\n          CarakanHelper.getMain(consonant_final) +\n          CarakanHelper.getFinal(\"pangkon\") +\n          CarakanHelper.getPunctuation(\",\");\n      } else {\n        builder.nonLetter = CarakanHelper.getPunctuation(\".\");\n      }\n    }\n    return builder.build();\n  }\n\n  /* Converts syllable containing only vowels, without any initial consonants */\n  if (consonant_initial == null) {\n    if (vowel.match(RegExp(CarakanConst.LATIN.VOWELS_SWARA, \"g\"))) {\n      builder.main = CarakanHelper.getMain(vowel);\n    } else {\n      builder.main = CarakanHelper.getMain(\"h\") + CarakanHelper.getVowel(vowel);\n    }\n    builder.final = CarakanHelper.getFinal(consonant_panyigeg);\n    return builder.build();\n  }\n\n  /* Converts syllable with Cakra and Cakra Keret */\n  if (consonant_sonorant === \"r\") {\n    let useResidue = true;\n    if (residue.length > 0 && !CarakanHelper.isSpace(residue)) {\n      /* Place the Cakra/Cakra keret on the bottom of pasangan */\n      builder.main = CarakanHelper.getMain(residue);\n      builder.sonorant = CarakanHelper.getSonorant(consonant_initial);\n      if (vowel !== \"x\") {\n        builder.afterSonorant = CarakanHelper.getSonorant(\"r\");\n        builder.vowel = CarakanHelper.getVowel(vowel);\n      } else {\n        builder.afterSonorant = CarakanHelper.getSonorant(\"rx\");\n      }\n      useResidue = false;\n    } else {\n      /* Place the Cakra/Cakra keret on the bottom of main letter */\n      builder.main = CarakanHelper.getMain(consonant_initial);\n      if (vowel === \"x\") {\n        builder.sonorant = CarakanHelper.getSonorant(\"rx\");\n      } else {\n        builder.sonorant = CarakanHelper.getSonorant(consonant_sonorant);\n        builder.vowel = CarakanHelper.getVowel(vowel);\n      }\n    }\n    builder.final = CarakanHelper.getFinal(consonant_panyigeg);\n    return builder.build(useResidue);\n  }\n\n  const useGanten = consonant_initial.match(/[rl]/g) && consonant_sonorant == null && vowel === \"x\";\n  if (useGanten) {\n    builder.main = CarakanHelper.getMain(`${consonant_initial}x`);\n    builder.final = CarakanHelper.getFinal(consonant_panyigeg);\n    return builder.build();\n  }\n\n  builder.main = CarakanHelper.getMain(consonant_initial);\n  builder.sonorant = CarakanHelper.getSonorant(consonant_sonorant);\n  builder.vowel = CarakanHelper.getVowel(vowel);\n  builder.final = CarakanHelper.getFinal(consonant_panyigeg);\n  return builder.build();\n};\n","import { LatinChars } from \"../constants/constants\";\n\n/**\n * @description Provides many helper function to get Latin characters from Sundanese characters\n */\nnamespace LatinHelper {\n  /**\n   * @description Returns the corresponding Ngalagena and Swara character\n   * @param char The character to be transliterated\n   */\n  export const getLetter = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.SWARA) return LatinChars.SWARA[char];\n    if (char in LatinChars.NGLEGENA) return LatinChars.NGLEGENA[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding sonorant pasangan character\n   * @param char The character to be transliterated\n   */\n  export const getPasangan = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.PASANGAN) return LatinChars.PASANGAN[char];\n    return char;\n  };\n\n  export const getSandhangan = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.SANDHANGAN) return LatinChars.SANDHANGAN[char];\n    return char;\n  };\n\n  export const getConsonantSign = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.CONSONANT_SIGN) return LatinChars.CONSONANT_SIGN[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding pada character\n   * @param char The character to be transliterated\n   */\n  export const getPada = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.PADA) return LatinChars.PADA[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding Latin number character\n   * @param char The character to be transliterated\n   */\n  export const getNumber = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.ANGKA) return LatinChars.ANGKA[char];\n    return char;\n  };\n\n  /**\n   * @description Returns the corresponding Miscellaneous character\n   * @param char The character to be transliterated\n   */\n  export const getMisc = (char: string): string => {\n    if (char == null) return \"\";\n    if (char in LatinChars.MISC) return LatinChars.MISC[char];\n    return char;\n  };\n}\n\nexport default LatinHelper;\n","import { preferNative as matchAll } from \"string-match-all\";\nimport { CarakanConst } from \"../constants/constants\";\nimport LatinHelper from \"../helpers/LatinHelper\";\nimport { LatinBuilder } from \"../helpers/SyllableBuilder\";\n\n/**\n * @function toLatin\n * @description Transliterate a string in Javanese characters into its corresponding form in Latin.\n * @param input The input string in Javanese script to be converted.\n * @returns The converted string in Latin.\n * @example\n * toLatin(\"ꦏꦂꦪ\")\n * // => karya\n */\nexport const toLatin = (input: string): string => {\n  /* Trim input */\n  input = input.trim();\n\n  /*\n   * Here, we break down the input on a per-syllable basis using RegEx,\n   * iterate and feed it into the syllable transliterator,\n   * and append the result to the output string.\n   */\n  const syllables = [...matchAll(input, RegExp(CarakanConst.REGEX.CAPTURE_CARAKAN, \"g\"))];\n\n  let output = \"\";\n  if (syllables.length > 0) {\n    for (const group of syllables) {\n      output += getTransliteration(group);\n    }\n  }\n  return output;\n};\n\n/**\n * @description Converts the already broken down syllable into Sundanese script\n */\nconst getTransliteration = (groups: RegExpMatchArray): string => {\n  /* Assign each capture groups into variable names */\n  const [\n    space,\n    angka,\n    ngalagena,\n    cecak_telu,\n    pangkon,\n    con_sign,\n    sandhangan1,\n    sandhangan2,\n    sandhangan_final,\n    swara,\n    pada,\n  ] = groups.slice(1, 12);\n\n  const builder = new LatinBuilder();\n\n  /* Converts syllable containing numbers */\n  if (angka != null) {\n    return builder.build(LatinHelper.getNumber(angka));\n  }\n\n  /* Converts syllable containing letters */\n  if (ngalagena != null) {\n    /* Add cecak telu to get loan letter if cecak telu indeed exists in the syllable */\n    builder.add(LatinHelper.getLetter(ngalagena + (cecak_telu ?? \"\")));\n\n    /* if there's no pangkon, there might be consonant sign or sandhangan*/\n    if (pangkon == null) {\n      /* Converts consonant sign */\n      if (con_sign != null) {\n        builder.add(LatinHelper.getConsonantSign(con_sign));\n      }\n\n      /* Converts sandhangan */\n      if (sandhangan1 != null && sandhangan2 == null) {\n        builder.add(LatinHelper.getSandhangan(sandhangan1));\n      } else if (sandhangan1 != null && sandhangan2 != null) {\n        /* Sandhangan2 in case of taling-tarung */\n        builder.add(LatinHelper.getSandhangan(sandhangan1 + sandhangan2));\n      } else {\n        builder.add(\"a\");\n      }\n\n      /* Converts final sandhangan */\n      if (sandhangan_final != null) {\n        builder.add(LatinHelper.getSandhangan(sandhangan_final));\n      }\n    }\n  }\n\n  if (swara != null) {\n    /* Converts swara */\n    builder.add(LatinHelper.getLetter(swara));\n  }\n\n  if (pada != null) {\n    /* Converts pada */\n    builder.add(LatinHelper.getPada(pada));\n  }\n\n  if (space != null) {\n    /* Modern Carakan is not scriptio continuo, so add space if it exists */\n    builder.add(\" \");\n  }\n\n  return builder.build();\n};\n\nexport default toLatin;\n"],"names":["_arrayLikeToArray","_unsupportedIterableToArray","arrayLikeToArray","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","arrayWithoutHoles","iterableToArray","nonIterableSpread","invertMapping","obj","result","_keys","Object","keys","i","length","LATIN","CONSONANTS","CONSONANTS_PANYIGEG","CONSONANTS_MURDA","CONSONANTS_UPPERCASE_WITHOUT_MURDA","CONSONANTS_WITHOUT_PANYIGEG","DIGITS","DIGITS_PUNC","DOT_COMMA","SPACE","VOWELS","VOWELS_SWARA","EXCEPT_SWARA","CAPTURE_RESIDUE","CARAKAN","ANGKA","NGLEGENA","CECAK_TELU","SANDHANGAN_FINAL","SWARA","SANDHANGAN","CONSONANT_SIGN","PANGKON","PADA","PANGKAT","CAPTURE_LATIN","join","CAPTURE_CARAKAN","CarakanConst","LatinConst","ACCENTS_MAP","h","n","c","r","k","d","t","s","w","l","p","dh","j","y","ny","m","g","b","th","ng","z","f","v","kh","dz","gh","N","K","T","S","P","NY","G","B","A","I","U","E","O","rx","lx","wulu","suku","taling","talingTarung","pepet","cecak","wignyan","layar","cakra","keret","pengkal","pangkon","lingsa","lungsi","pangkat","adeg","adegadeg","piseleh","piselehwalik","rerenggankiwa","rerenggantengen","zwnj","CarakanChars","re","le","PASANGAN","MISC","LatinChars","str","RegExp","test","getMain","char","getSonorant","getVowel","toLowerCase","getFinal","residue","groups","matchAll","text","pattern","replace","matched","CarakanHelper","SyllableBuilder","matchGroups","input","isLastOfInput","nonLetter","preMain","main","sonorant","afterSonorant","vowel","postFinal","useResidue","returnResidue","finalIndex","index","lastResidue","slice","isSpace","LatinBuilder","toJavanese","config","useAccents","useSwara","useMurda","trim","normalizeAccents","syllables","REGEX","output","entries","current","previous","residueIndex","getTransliteration","digits_or_punc","consonant_initial","consonant_sonorant","consonant_panyigeg","consonant_final","dot_or_comma","builder","isDigit","numbers","split","map","digit","getNumber","padaPangkat","getPunctuation","build","getMisc","match","useGanten","LatinHelper","toLatin","group","space","angka","ngalagena","cecak_telu","con_sign","sandhangan1","sandhangan2","sandhangan_final","swara","pada","add","getLetter","getConsonantSign","getSandhangan","getPada"],"mappings":"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"}